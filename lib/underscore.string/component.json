{
  "name": "underscore.string",
  "version": "2.3.1",
  "description": "String manipulation extensions for Underscore.js javascript library.",
  "homepage": "http://epeli.github.com/underscore.string/",
  "contributors": [
    {
      "name": "Esa-Matti Suuronen",
      "email": "esa-matti@suuronen.org",
      "url": "http://esa-matti.suuronen.org/"
    },
    {
      "name": "Edward Tsech",
      "email": "edtsech@gmail.com"
    },
    {
      "name": "Pavel Pravosud",
      "email": "pavel@pravosud.com",
      "url": "<https://github.com/rwz>"
    },
    {
      "name": "Sasha Koss",
      "email": "kossnocorp@gmail.com",
      "url": "http://koss.nocorp.me/"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    },
    {
      "name": "Pete Kruckenberg",
      "email": "https://github.com/kruckenb",
      "url": "<https://github.com/kruckenb>"
    },
    {
      "name": "Paul Chavard",
      "email": "paul@chavard.net",
      "url": "<http://tchak.net>"
    },
    {
      "name": "Ed Finkler",
      "email": "coj@funkatron.com",
      "url": "<http://funkatron.com>"
    }
  ],
  "keywords": [
    "underscore",
    "string"
  ],
  "main": "./lib/underscore.string",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/epeli/underscore.string.git"
  },
  "bugs": {
    "url": "https://github.com/epeli/underscore.string/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "# Underscore.string [![Build Status](https://secure.travis-ci.org/epeli/underscore.string.png?branch=master)](http://travis-ci.org/epeli/underscore.string) #\r\n\r\n\r\n\r\nJavascript lacks complete string manipulation operations.\r\nThis an attempt to fill that gap. List of build-in methods can be found\r\nfor example from [Dive Into JavaScript][d].\r\n\r\n[d]: http://www.diveintojavascript.com/core-javascript-reference/the-string-object\r\n\r\n\r\nAs name states this an extension for [Underscore.js][u], but it can be used\r\nindependently from **_s**-global variable. But with Underscore.js you can\r\nuse Object-Oriented style and chaining:\r\n\r\n[u]: http://documentcloud.github.com/underscore/\r\n\r\n```javascript\r\n_(\"   epeli  \").chain().trim().capitalize().value()\r\n=> \"Epeli\"\r\n```\r\n\r\n## Download ##\r\n\r\n  * [Development version](https://raw.github.com/epeli/underscore.string/master/lib/underscore.string.js) *Uncompressed with Comments 18kb*\r\n  * [Production version](https://github.com/epeli/underscore.string/raw/master/dist/underscore.string.min.js) *Minified 7kb*\r\n\r\n\r\n## Node.js installation ##\r\n\r\n**npm package**\r\n\r\n    npm install underscore.string\r\n\r\n**Standalone usage**:\r\n\r\n```javascript\r\nvar _s = require('underscore.string');\r\n```\r\n\r\n**Integrate with Underscore.js**:\r\n\r\n```javascript\r\nvar _  = require('underscore');\r\n\r\n// Import Underscore.string to separate object, because there are conflict functions (include, reverse, contains)\r\n_.str = require('underscore.string');\r\n\r\n// Mix in non-conflict functions to Underscore namespace if you want\r\n_.mixin(_.str.exports());\r\n\r\n// All functions, include conflict, will be available through _.str object\r\n_.str.include('Underscore.string', 'string'); // => true\r\n```\r\n\r\n## String Functions ##\r\n\r\nFor availability of functions in this way you need to mix in Underscore.string functions:\r\n\r\n```javascript\r\n_.mixin(_.string.exports());\r\n```\r\n\r\notherwise functions from examples will be available through _.string or _.str objects:\r\n\r\n```javascript\r\n_.str.capitalize('epeli')\r\n=> \"Epeli\"\r\n```\r\n\r\n**numberFormat** _.numberFormat(number, [ decimals=0, decimalSeparator='.', orderSeparator=','])\r\n\r\nFormats the numbers.\r\n\r\n```javascript\r\n_.numberFormat(1000, 2)\r\n=> \"1,000.00\"\r\n\r\n_.numberFormat(123456789.123, 5, '.', ',')\r\n=> \"123,456,789.12300\"\r\n```\r\n\r\n\r\n**levenshtein** _.levenshtein(string1, string2)\r\n\r\nCalculates [Levenshtein distance][ld] between two strings.\r\n[ld]: http://en.wikipedia.org/wiki/Levenshtein_distance\r\n\r\n```javascript\r\n_.levenshtein('kitten', 'kittah')\r\n=> 2\r\n```\r\n\r\n**capitalize** _.capitalize(string)\r\n\r\nConverts first letter of the string to uppercase.\r\n\r\n```javascript\r\n_.capitalize(\"foo Bar\")\r\n=> \"Foo Bar\"\r\n```\r\n\r\n**chop** _.chop(string, step)\r\n\r\n```javascript\r\n_.chop('whitespace', 3)\r\n=> ['whi','tes','pac','e']\r\n```\r\n\r\n**clean** _.clean(str)\r\n\r\nCompress some whitespaces to one.\r\n\r\n```javascript\r\n_.clean(\" foo    bar   \")\r\n=> 'foo bar'\r\n```\r\n\r\n**chars** _.chars(str)\r\n\r\n```javascript\r\n_.chars('Hello')\r\n=> ['H','e','l','l','o']\r\n```\r\n\r\n**swapCase** _.swapCase(str)\r\n\r\nReturns a copy of the string in which all the case-based characters have had their case swapped.\r\n\r\n```javascript\r\n_.swapCase('hELLO')\r\n=> 'Hello'\r\n```\r\n\r\n**include** available only through _.str object, because Underscore has function with the same name.\r\n\r\n```javascript\r\n_.str.include(\"foobar\", \"ob\")\r\n=> true\r\n```\r\n\r\n(removed) **includes** _.includes(string, substring)\r\n\r\nTests if string contains a substring.\r\n\r\n```javascript\r\n_.includes(\"foobar\", \"ob\")\r\n=> true\r\n```\r\n\r\n**includes** function was removed\r\n\r\nBut you can create it in this way, for compatibility with previous versions:\r\n\r\n```javascript\r\n_.includes = _.str.include\r\n```\r\n\r\n**count** _.count(string, substring)\r\n\r\n```javascript\r\n_('Hello world').count('l')\r\n=> 3\r\n```\r\n\r\n**escapeHTML** _.escapeHTML(string)\r\n\r\nConverts HTML special characters to their entity equivalents.\r\n\r\n```javascript\r\n_('<div>Blah blah blah</div>').escapeHTML();\r\n=> '&lt;div&gt;Blah blah blah&lt;/div&gt;'\r\n```\r\n\r\n**unescapeHTML** _.unescapeHTML(string)\r\n\r\nConverts entity characters to HTML equivalents.\r\n\r\n```javascript\r\n_('&lt;div&gt;Blah blah blah&lt;/div&gt;').unescapeHTML();\r\n=> '<div>Blah blah blah</div>'\r\n```\r\n\r\n**insert** _.insert(string, index, substing)\r\n\r\n```javascript\r\n_('Hello ').insert(6, 'world')\r\n=> 'Hello world'\r\n```\r\n\r\n**isBlank** _.isBlank(string)\r\n\r\n```javascript\r\n_('').isBlank(); // => true\r\n_('\\n').isBlank(); // => true\r\n_(' ').isBlank(); // => true\r\n_('a').isBlank(); // => false\r\n```\r\n\r\n**join** _.join(separator, *strings)\r\n\r\nJoins strings together with given separator\r\n\r\n```javascript\r\n_.join(\" \", \"foo\", \"bar\")\r\n=> \"foo bar\"\r\n```\r\n\r\n**lines** _.lines(str)\r\n\r\n```javascript\r\n_.lines(\"Hello\\nWorld\")\r\n=> [\"Hello\", \"World\"]\r\n```\r\n\r\n**reverse** available only through _.str object, because Underscore has function with the same name.\r\n\r\nReturn reversed string:\r\n\r\n```javascript\r\n_.str.reverse(\"foobar\")\r\n=> 'raboof'\r\n```\r\n\r\n**splice**  _.splice(string, index, howmany, substring)\r\n\r\nLike a array splice.\r\n\r\n```javascript\r\n_('https://edtsech@bitbucket.org/edtsech/underscore.strings').splice(30, 7, 'epeli')\r\n=> 'https://edtsech@bitbucket.org/epeli/underscore.strings'\r\n```\r\n\r\n**startsWith** _.startsWith(string, starts)\r\n\r\nThis method checks whether string starts with starts.\r\n\r\n```javascript\r\n_(\"image.gif\").startsWith(\"image\")\r\n=> true\r\n```\r\n\r\n**endsWith** _.endsWith(string, ends)\r\n\r\nThis method checks whether string ends with ends.\r\n\r\n```javascript\r\n_(\"image.gif\").endsWith(\"gif\")\r\n=> true\r\n```\r\n\r\n**succ**  _.succ(str)\r\n\r\nReturns the successor to str.\r\n\r\n```javascript\r\n_('a').succ()\r\n=> 'b'\r\n\r\n_('A').succ()\r\n=> 'B'\r\n```\r\n\r\n**supplant**\r\n\r\nSupplant function was removed, use Underscore.js [template function][p].\r\n\r\n[p]: http://documentcloud.github.com/underscore/#template\r\n\r\n**strip** alias for *trim*\r\n\r\n**lstrip** alias for *ltrim*\r\n\r\n**rstrip** alias for *rtrim*\r\n\r\n**titleize** _.titleize(string)\r\n\r\n```javascript\r\n_('my name is epeli').titleize()\r\n=> 'My Name Is Epeli'\r\n```\r\n\r\n**camelize** _.camelize(string)\r\n\r\nConverts underscored or dasherized string to a camelized one\r\n\r\n```javascript\r\n_('-moz-transform').camelize()\r\n=> 'MozTransform'\r\n```\r\n\r\n**classify** _.classify(string)\r\n\r\nConverts string to camelized class name\r\n\r\n```javascript\r\n_('some_class_name').classify()\r\n=> 'SomeClassName'\r\n```\r\n\r\n**underscored** _.underscored(string)\r\n\r\nConverts a camelized or dasherized string into an underscored one\r\n\r\n```javascript\r\n_('MozTransform').underscored()\r\n=> 'moz_transform'\r\n```\r\n\r\n**dasherize** _.dasherize(string)\r\n\r\nConverts a underscored or camelized string into an dasherized one\r\n\r\n```javascript\r\n_('MozTransform').dasherize()\r\n=> '-moz-transform'\r\n```\r\n\r\n**humanize** _.humanize(string)\r\n\r\nConverts an underscored, camelized, or dasherized string into a humanized one.\r\nAlso removes beginning and ending whitespace, and removes the postfix '_id'.\r\n\r\n```javascript\r\n_('  capitalize dash-CamelCase_underscore trim  ').humanize()\r\n=> 'Capitalize dash camel case underscore trim'\r\n```\r\n\r\n**trim** _.trim(string, [characters])\r\n\r\ntrims defined characters from begining and ending of the string.\r\nDefaults to whitespace characters.\r\n\r\n```javascript\r\n_.trim(\"  foobar   \")\r\n=> \"foobar\"\r\n\r\n_.trim(\"_-foobar-_\", \"_-\")\r\n=> \"foobar\"\r\n```\r\n\r\n\r\n**ltrim** _.ltrim(string, [characters])\r\n\r\nLeft trim. Similar to trim, but only for left side.\r\n\r\n\r\n**rtrim** _.rtrim(string, [characters])\r\n\r\nRight trim. Similar to trim, but only for right side.\r\n\r\n**truncate** _.truncate(string, length, truncateString)\r\n\r\n```javascript\r\n_('Hello world').truncate(5)\r\n=> 'Hello...'\r\n\r\n_('Hello').truncate(10)\r\n=> 'Hello'\r\n```\r\n\r\n**prune** _.prune(string, length, pruneString)\r\n\r\nElegant version of truncate.\r\nMakes sure the pruned string does not exceed the original length.\r\nAvoid half-chopped words when truncating.\r\n\r\n```javascript\r\n_('Hello, world').prune(5)\r\n=> 'Hello...'\r\n\r\n_('Hello, world').prune(8)\r\n=> 'Hello...'\r\n\r\n_('Hello, world').prune(5, ' (read a lot more)')\r\n=> 'Hello, world' (as adding \"(read a lot more)\" would be longer than the original string)\r\n\r\n_('Hello, cruel world').prune(15)\r\n=> 'Hello, cruel...'\r\n\r\n_('Hello').prune(10)\r\n=> 'Hello'\r\n```\r\n\r\n**words** _.words(str, delimiter=/\\s+/)\r\n\r\nSplit string by delimiter (String or RegExp), /\\s+/ by default.\r\n\r\n```javascript\r\n_.words(\"   I   love   you   \")\r\n=> [\"I\",\"love\",\"you\"]\r\n\r\n_.words(\"I_love_you\", \"_\")\r\n=> [\"I\",\"love\",\"you\"]\r\n\r\n_.words(\"I-love-you\", /-/)\r\n=> [\"I\",\"love\",\"you\"]\r\n\r\n_.words(\"   \")\r\n=> []\r\n```\r\n\r\n**sprintf** _.sprintf(string format, *arguments)\r\n\r\nC like string formatting.\r\nCredits goes to [Alexandru Marasteanu][o].\r\nFor more detailed documentation, see the [original page][o].\r\n\r\n[o]: http://www.diveintojavascript.com/projects/sprintf-for-javascript\r\n\r\n```javascript\r\n_.sprintf(\"%.1f\", 1.17)\r\n\"1.2\"\r\n```\r\n\r\n**pad** _.pad(str, length, [padStr, type])\r\n\r\npads the `str` with characters until the total string length is equal to the passed `length` parameter. By default, pads on the **left** with the space char (`\" \"`). `padStr` is truncated to a single character if necessary.\r\n\r\n```javascript\r\n_.pad(\"1\", 8)\r\n-> \"       1\";\r\n\r\n_.pad(\"1\", 8, '0')\r\n-> \"00000001\";\r\n\r\n_.pad(\"1\", 8, '0', 'right')\r\n-> \"10000000\";\r\n\r\n_.pad(\"1\", 8, '0', 'both')\r\n-> \"00001000\";\r\n\r\n_.pad(\"1\", 8, 'bleepblorp', 'both')\r\n-> \"bbbb1bbb\";\r\n```\r\n\r\n**lpad** _.lpad(str, length, [padStr])\r\n\r\nleft-pad a string. Alias for `pad(str, length, padStr, 'left')`\r\n\r\n```javascript\r\n_.lpad(\"1\", 8, '0')\r\n-> \"00000001\";\r\n```\r\n\r\n**rpad** _.rpad(str, length, [padStr])\r\n\r\nright-pad a string. Alias for `pad(str, length, padStr, 'right')`\r\n\r\n```javascript\r\n_.rpad(\"1\", 8, '0')\r\n-> \"10000000\";\r\n```\r\n\r\n**lrpad** _.lrpad(str, length, [padStr])\r\n\r\nleft/right-pad a string. Alias for `pad(str, length, padStr, 'both')`\r\n\r\n```javascript\r\n_.lrpad(\"1\", 8, '0')\r\n-> \"00001000\";\r\n```\r\n\r\n**center** alias for **lrpad**\r\n\r\n**ljust** alias for *rpad*\r\n\r\n**rjust** alias for *lpad*\r\n\r\n**toNumber**  _.toNumber(string, [decimals])\r\n\r\nParse string to number. Returns NaN if string can't be parsed to number.\r\n\r\n```javascript\r\n_('2.556').toNumber()\r\n=> 3\r\n\r\n_('2.556').toNumber(1)\r\n=> 2.6\r\n```\r\n\r\n**strRight**  _.strRight(string, pattern)\r\n\r\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\r\n\r\n```javascript\r\n_('This_is_a_test_string').strRight('_')\r\n=> \"is_a_test_string\";\r\n```\r\n\r\n**strRightBack**  _.strRightBack(string, pattern)\r\n\r\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\r\n\r\n```javascript\r\n_('This_is_a_test_string').strRightBack('_')\r\n=> \"string\";\r\n```\r\n\r\n**strLeft**  _.strLeft(string, pattern)\r\n\r\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\r\n\r\n```javascript\r\n_('This_is_a_test_string').strLeft('_')\r\n=> \"This\";\r\n```\r\n\r\n**strLeftBack**  _.strLeftBack(string, pattern)\r\n\r\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\r\n\r\n```javascript\r\n_('This_is_a_test_string').strLeftBack('_')\r\n=> \"This_is_a_test\";\r\n```\r\n\r\n**stripTags**\r\n\r\nRemoves all html tags from string.\r\n\r\n```javascript\r\n_('a <a href=\"#\">link</a>').stripTags()\r\n=> 'a link'\r\n\r\n_('a <a href=\"#\">link</a><script>alert(\"hello world!\")</script>').stripTags()\r\n=> 'a linkalert(\"hello world!\")'\r\n```\r\n\r\n**toSentence**  _.toSentence(array, [delimiter, lastDelimiter])\r\n\r\nJoin an array into a human readable sentence.\r\n\r\n```javascript\r\n_.toSentence(['jQuery', 'Mootools', 'Prototype'])\r\n=> 'jQuery, Mootools and Prototype';\r\n\r\n_.toSentence(['jQuery', 'Mootools', 'Prototype'], ', ', ' unt ')\r\n=> 'jQuery, Mootools unt Prototype';\r\n```\r\n\r\n**toSentenceSerial**  _.toSentenceSerial(array, [delimiter, lastDelimiter])\r\n\r\nThe same as `toSentence`, but adjusts delimeters to use [Serial comma](http://en.wikipedia.org/wiki/Serial_comma).\r\n\r\n```javascript\r\n_.toSentenceSerial(['jQuery', 'Mootools'])\r\n=> 'jQuery and Mootools';\r\n\r\n_.toSentenceSerial(['jQuery', 'Mootools', 'Prototype'])\r\n=> 'jQuery, Mootools, and Prototype'\r\n\r\n_.toSentenceSerial(['jQuery', 'Mootools', 'Prototype'], ', ', ' unt ');\r\n=> 'jQuery, Mootools, unt Prototype';\r\n```\r\n\r\n**repeat** _.repeat(string, count, [separator])\r\n\r\nRepeats a string count times.\r\n\r\n```javascript\r\n_.repeat(\"foo\", 3)\r\n=> 'foofoofoo';\r\n\r\n_.repeat(\"foo\", 3, \"bar\")\r\n=> 'foobarfoobarfoo'\r\n```\r\n\r\n**surround** _.surround(string, wrap)\r\n\r\nSurround a string with another string.\r\n\r\n```javascript\r\n_.surround(\"foo\", \"ab\")\r\n=> 'abfooab';\r\n```\r\n\r\n**quote** _.quote(string) or _.q(string)\r\n\r\nQuotes a string.\r\n\r\n```javascript\r\n_.quote('foo')\r\n=> '\"foo\"';\r\n```\r\n\r\n\r\n**slugify** _.slugify(string)\r\n\r\nTransform text into a URL slug. Replaces whitespaces, accentuated, and special characters with a dash.\r\n\r\n```javascript\r\n_.slugify(\"Un éléphant à l'orée du bois\")\r\n=> 'un-elephant-a-loree-du-bois';\r\n```\r\n\r\n***Caution: this function is charset dependent***\r\n\r\n## Roadmap ##\r\n\r\nAny suggestions or bug reports are welcome. Just email me or more preferably open an issue.\r\n\r\n#### Problems\r\n\r\nWe lose two things for `include` and `reverse` methods from `_.string`:\r\n\r\n* Calls like `_('foobar').include('bar')` aren't available;\r\n* Chaining isn't available too.\r\n\r\nBut if you need this functionality you can create aliases for conflict functions which will be convenient for you:\r\n\r\n```javascript\r\n_.mixin({\r\n    includeString: _.str.include,\r\n    reverseString: _.str.reverse\r\n})\r\n\r\n// Now wrapper calls and chaining are available.\r\n_('foobar').chain().reverseString().includeString('rab').value()\r\n```\r\n\r\n#### Standalone Usage\r\n\r\nIf you are using Underscore.string without Underscore. You also have `_.string` namespace for it and `_.str` alias\r\nBut of course you can just reassign `_` variable with `_.string`\r\n\r\n```javascript\r\n_ = _.string\r\n```\r\n\r\n## Changelog ##\r\n\r\n### 2.3.1 ###\r\n\r\n* Changed integration logic, now trying everything in order\r\n* Fixed classify method to chew some unexpected input\r\n* Fixed toNumber method failing to recognize '0.0' as a proper number\r\n\r\n\r\n### 2.3.0 ###\r\n\r\n* Added `numberformat` method\r\n* Added `levenshtein` method (Levenshtein distance calculation)\r\n* Added `swapCase` method\r\n* Changed default behavior of `words` method\r\n* Added `toSentenceSerial` method\r\n* Added `surround` and `quote` methods\r\n\r\n### 2.2.0 ###\r\n\r\n* Capitalize method behavior changed\r\n* Various perfomance tweaks\r\n\r\n### 2.1.1###\r\n\r\n* Fixed words method bug\r\n* Added classify method\r\n\r\n### 2.1.0 ###\r\n\r\n* AMD support\r\n* Added toSentence method\r\n* Added slugify method\r\n* Lots of speed optimizations\r\n\r\n### 2.0.0 ###\r\n\r\n* Added prune, humanize functions\r\n* Added _.string (_.str) namespace for Underscore.string library\r\n* Removed includes function\r\n\r\nFor upgrading to this version you need to mix in Underscore.string library to Underscore object:\r\n\r\n```javascript\r\n_.mixin(_.string.exports());\r\n```\r\n\r\nand all non-conflict Underscore.string functions will be available through Underscore object.\r\nAlso function `includes` has been removed, you should replace this function by `_.str.include`\r\nor create alias `_.includes = _.str.include` and all your code will work fine.\r\n\r\n### 1.1.6 ###\r\n\r\n* Fixed reverse and truncate\r\n* Added isBlank, stripTags, inlude(alias for includes)\r\n* Added uglifier compression\r\n\r\n### 1.1.5 ###\r\n\r\n* Added strRight, strRightBack, strLeft, strLeftBack\r\n\r\n### 1.1.4 ###\r\n\r\n* Added pad, lpad, rpad, lrpad methods and aliases center, ljust, rjust\r\n* Integration with Underscore 1.1.6\r\n\r\n### 1.1.3 ###\r\n\r\n* Added methods: underscored, camelize, dasherize\r\n* Support newer version of npm\r\n\r\n### 1.1.2 ###\r\n\r\n* Created functions: lines, chars, words functions\r\n\r\n### 1.0.2 ###\r\n\r\n* Created integration test suite with underscore.js 1.1.4 (now it's absolutely compatible)\r\n* Removed 'reverse' function, because this function override underscore.js 'reverse'\r\n\r\n## Contribute ##\r\n\r\n* Fork & pull request. Don't forget about tests.\r\n* If you planning add some feature please create issue before.\r\n\r\nOtherwise changes will be rejected.\r\n\r\n## Contributors list ##\r\n[Can be found here](https://github.com/epeli/underscore.string/graphs/contributors).\r\n\r\n\r\n## Licence ##\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2011 Esa-Matti Suuronen esa-matti@suuronen.org\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "readmeFilename": "README.markdown",
  "_id": "underscore.string@2.3.1"
}