{
  "name": "reqwest",
  "description": "A wrapper for asynchronous http requests",
  "keywords": [
    "ender",
    "ajax",
    "xhr",
    "connection",
    "web 2.0",
    "async"
  ],
  "version": "0.6.3",
  "homepage": "https://github.com/ded/reqwest",
  "author": {
    "name": "Dustin Diaz",
    "email": "dustin@dustindiaz.com",
    "url": "http://dustindiaz.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ded/reqwest.git"
  },
  "main": "./reqwest.js",
  "ender": "./src/ender.js",
  "devDependencies": {
    "connect": "1.8.x",
    "mime": "1.x.x",
    "sink-test": ">=0.1.2",
    "dispatch": "0.x.x",
    "valentine": ">=1.4.7",
    "smoosh": "0.4.0"
  },
  "scripts": {
    "boosh": "smoosh make ./build.json",
    "test": "node make/tests.js"
  },
  "readme": "# It's AJAX\r\n\r\nAll over again. Includes support for xmlHttpRequest, JSONP, CORS, and CommonJS Promises A.\r\n\r\nThe happs\r\n---------\r\n\r\n``` sh\r\n$ git clone git://github.com/ded/reqwest.git reqwest\r\n$ cd !$\r\n$ npm install\r\n$ make\r\n```\r\n\r\nAPI\r\n---------\r\n\r\n``` js\r\nreqwest('path/to/html', function (resp) {\r\n  qwery('#content').html(resp)\r\n})\r\n```\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/html'\r\n  , method: 'post'\r\n  , data: { foo: 'bar', baz: 100 }\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp)\r\n    }\r\n})\r\n```\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/html'\r\n  , method: 'get'\r\n  , data: { [ name: 'foo', value: 'bar' ], [ name: 'baz', value: 100 ] }\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp)\r\n    }\r\n})\r\n```\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/json'\r\n  , type: 'json'\r\n  , method: 'post'\r\n  , error: function (err) { }\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp.content)\r\n    }\r\n})\r\n```\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/json'\r\n  , type: 'json'\r\n  , method: 'post'\r\n  , contentType: 'application/json'\r\n  , headers: {\r\n      'X-My-Custom-Header': 'SomethingImportant'\r\n    }\r\n  , error: function (err) { }\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp.content)\r\n    }\r\n})\r\n```\r\n\r\n``` js\r\n\r\n// Uses XMLHttpRequest2 credentialled requests (cookies, HTTP basic auth) if supported\r\n\r\nreqwest({\r\n    url: 'path/to/json'\r\n  , type: 'json'\r\n  , method: 'post'\r\n  , contentType: 'application/json'\r\n  , crossOrigin: true\r\n  , withCredentials: true\r\n  , error: function (err) { }\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp.content)\r\n    }\r\n})\r\n```\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/data.jsonp?callback=?'\r\n  , type: 'jsonp'\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp.content)\r\n    }\r\n})\r\n```\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/data.jsonp?foo=bar'\r\n  , type: 'jsonp'\r\n  , jsonpCallback: 'foo'\r\n  , jsonpCallbackName: 'bar'\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp.content)\r\n    }\r\n})\r\n```\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/data.jsonp?foo=bar'\r\n  , type: 'jsonp'\r\n  , jsonpCallback: 'foo'\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp.content)\r\n    }\r\n  , complete: function (resp) {\r\n      qwery('#hide-this').hide()\r\n    }\r\n})\r\n```\r\n\r\n## Promises\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/data.jsonp?foo=bar'\r\n  , type: 'jsonp'\r\n  , jsonpCallback: 'foo'\r\n})\r\n  .then(function (resp) {\r\n    qwery('#content').html(resp.content)\r\n  }, function (err, msg) {\r\n    qwery('#errors').html(msg)\r\n  })\r\n  .always(function (resp) {\r\n    qwery('#hide-this').hide()\r\n  })\r\n```\r\n\r\n``` js\r\nreqwest({\r\n    url: 'path/to/data.jsonp?foo=bar'\r\n  , type: 'jsonp'\r\n  , jsonpCallback: 'foo'\r\n})\r\n  .then(function (resp) {\r\n    qwery('#content').html(resp.content)\r\n  })\r\n  .fail(function (err, msg) {\r\n    qwery('#errors').html(msg)\r\n  })\r\n  .always(function (resp) {\r\n    qwery('#hide-this').hide()\r\n  })\r\n```\r\n\r\n``` js\r\nvar r = reqwest({\r\n    url: 'path/to/data.jsonp?foo=bar'\r\n  , type: 'jsonp'\r\n  , jsonpCallback: 'foo'\r\n  , success: function () {\r\n      setTimeout(function () {\r\n        r\r\n          .then(function (resp) {\r\n            qwery('#content').html(resp.content)\r\n          }, function (err) { })\r\n          .always(function (resp) {\r\n             qwery('#hide-this').hide()\r\n          })\r\n      }, 15)\r\n    }\r\n})\r\n```\r\n\r\n\r\nThe Tests\r\n---------\r\n    $ npm test\r\n\r\nBrowser support\r\n---------------\r\n  * IE6+\r\n  * Chrome 1+\r\n  * Safari 3+\r\n  * Firefox 1+\r\n  * Opera\r\n\r\nEnder Support\r\n-------------\r\nReqwest can be used as an [Ender](http://ender.no.de) module. Add it to your existing build as such:\r\n\r\n    $ ender add reqwest\r\n\r\nUse it as such:\r\n\r\n``` js\r\n$.ajax({ ... })\r\n```\r\n\r\nSerialize things:\r\n\r\n``` js\r\n$(form).serialize() // returns query string -> x=y&...\r\n$(form).serialize({type:'array'}) // returns array name/value pairs -> [ { name: x, value: y}, ... ]\r\n$(form).serialize({type:'map'}) // returns an object representation -> { x: y, ... }\r\n$(form).serializeArray()\r\n$.toQueryString({\r\n    foo: 'bar'\r\n  , baz: 'thunk'\r\n}) // returns query string -> foo=bar&baz=thunk\r\n```\r\n\r\nOr, get a bit fancy:\r\n\r\n``` js\r\n$('#myform input[name=myradios]').serialize({type:'map'})['myradios'] // get the selected value\r\n$('input[type=text],#specialthing').serialize() // turn any arbitrary set of form elements into a query string\r\n```\r\n\r\n\r\nRequireJs and Jam\r\n------------------\r\nReqwest can also be used with RequireJs and can be installed via jam\r\n\r\n```\r\njam install reqwest\r\n```\r\n\r\n```js\r\ndefine(function(require){\r\n  var reqwest = require('reqwest');\r\n});\r\n```\r\n\r\n\r\njQuery and Zepto Compatibility\r\n------------------------------\r\nThere are some differences between the *Reqwest way* and the\r\n*jQuery/Zepto way*.\r\n\r\n### method ###\r\njQuery/Zepto use `type` to specify the request method while Reqwest uses\r\n`method` and reserves `type` for the response data type.\r\n\r\n### dataType ###\r\nWhen using jQuery/Zepto you use the `dataType` option to specify the type\r\nof data to expect from the server, Reqwest uses `type`. jQuery also can\r\nalso take a space-separated list of data types to specify the request,\r\nresponse and response-conversion types but Reqwest uses the `type`\r\nparameter to infer the response type and leaves conversion up to you.\r\n\r\n### JSONP ###\r\nReqwest also takes optional `jsonpCallback` and `jsonpCallbackName`\r\noptions to specify the callback query-string key and the callback function\r\nname respectively while jQuery uses `jsonp` and `jsonpCallback` for\r\nthese same options.\r\n\r\n\r\nBut fear not! If you must work the jQuery/Zepto way then Reqwest has\r\na wrapper that will remap these options for you:\r\n\r\n```js\r\nreqwest.compat({\r\n    url: 'path/to/data.jsonp?foo=bar'\r\n  , dataType: 'jsonp'\r\n  , jsonp: 'foo'\r\n  , jsonpCallback: 'bar'\r\n  , success: function (resp) {\r\n      qwery('#content').html(resp.content)\r\n    }\r\n})\r\n\r\n// or from Ender:\r\n\r\n$.ajax.compat({\r\n  ...\r\n})\r\n```\r\n\r\nIf you want to install jQuery/Zepto compatibility mode as the default\r\nthen simply place this snippet at the top of your code:\r\n\r\n```js\r\n$.ajax.compat && $.ender({ ajax: $.ajax.compat });\r\n```\r\n\r\n\r\n**Happy Ajaxing!**\r\n",
  "readmeFilename": "README.md",
  "_id": "reqwest@0.6.3"
}